// <auto-generated />
using System;
using ECommerce.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerce.Infra.Migrations
{
    [DbContext(typeof(SalesDbContext))]
    partial class SalesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ECommerce.Domain.Models.Sales.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ECommerce.Domain.Models.Sales.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TargetQuantityOfItems")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Promotions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Promotion");
                });

            modelBuilder.Entity("ECommerce.Domain.Models.Sales.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int");

                    b.Property<int>("ShopCartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShopCartId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("ECommerce.Domain.Models.Sales.ShopCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FinishedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OriginalTotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("ShopCarts");
                });

            modelBuilder.Entity("ECommerce.Domain.Models.Sales.FixedValuePromotion", b =>
                {
                    b.HasBaseType("ECommerce.Domain.Models.Sales.Promotion");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("FixedValuePromotion");
                });

            modelBuilder.Entity("ECommerce.Domain.Models.Sales.FreeItemPromotion", b =>
                {
                    b.HasBaseType("ECommerce.Domain.Models.Sales.Promotion");

                    b.Property<int>("QuantityOfFreeItems")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("FreeItemPromotion");
                });

            modelBuilder.Entity("ECommerce.Domain.Models.Sales.PercentageValuePromotion", b =>
                {
                    b.HasBaseType("ECommerce.Domain.Models.Sales.Promotion");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("PercentageValuePromotion");
                });

            modelBuilder.Entity("ECommerce.Domain.Models.Sales.Promotion", b =>
                {
                    b.HasOne("ECommerce.Domain.Models.Sales.Product", "Product")
                        .WithOne("Promotion")
                        .HasForeignKey("ECommerce.Domain.Models.Sales.Promotion", "ProductId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("ProductPromotionFK");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerce.Domain.Models.Sales.Sale", b =>
                {
                    b.HasOne("ECommerce.Domain.Models.Sales.Product", "Product")
                        .WithMany("Sales")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("ProductSalesFK");

                    b.HasOne("ECommerce.Domain.Models.Sales.ShopCart", "ShopCart")
                        .WithMany("Sales")
                        .HasForeignKey("ShopCartId")
                        .IsRequired()
                        .HasConstraintName("ShopCartSalesFK");

                    b.Navigation("Product");

                    b.Navigation("ShopCart");
                });

            modelBuilder.Entity("ECommerce.Domain.Models.Sales.Product", b =>
                {
                    b.Navigation("Promotion");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("ECommerce.Domain.Models.Sales.ShopCart", b =>
                {
                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
